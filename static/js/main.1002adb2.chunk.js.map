{"version":3,"sources":["utils/auth.ts","components/basics/Input/Input.tsx","components/basics/Button/Button.tsx","constants/paths/audio.ts","components/basics/Centered/Centered.styled.ts","screens/Login/Login.styled.ts","screens/Login/Login.tsx","components/Modal/Modal.tsx","components/LoadingIndicator/LoadingIndicator.tsx","screens/Lobby/Lobby.styled.ts","screens/Lobby/Lobby.tsx","screens/Battle/enums.ts","apis/battleApi.ts","apis/constants.ts","screens/Battle/steps/ChooseParty/ChooseParty.styled.ts","screens/Battle/steps/ChooseParty/ChooseParty.tsx","screens/Battle/steps/ChooseMoves/ChooseMoves.tsx","screens/Battle/QuitModal.tsx","screens/Battle/Battle.styled.ts","screens/Battle/Battle.tsx","navigation/Router.tsx","navigation/context.ts","navigation/enums.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["isAuthenticated","onAuthenticatedCallback","this","setTimeout","onSignoutCallback","Input","props","Button","StyledMaterialButton","onClick","e","Audio","play","styled","MaterialButton","div","LayoutContainer","Centered","Login","navigate","useContext","NavigationContext","autoFocus","placeholder","Auth","authenticate","ScreenState","Lobby","Modal","shown","onClose","children","StyledMaterialModal","open","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","ContentContainer","MaterialModal","LoadingIndicator","size","CircularProgress","useState","inviteModalShown","setInviteModalShown","isLoading","setIsLoading","a","fetch","response","status","Battle","console","error","alert","InviteModal","disabled","onInviteMatch","signout","BattleStep","Event","socket","socketIOClient","fetchPokemonList","Promise","resolve","reject","data","dummyPokemonList","fetchOpponent","name","sendChoosenParty","pokemonNdexs","emit","PlayerSelectsPokemon","dummyMove","description","type","power","accuracy","pp","ndex","types","image","moves","stats","TileContainer","Tile","TileDetail","ChooseParty","pokemonList","setActiveStep","choosen","setChoosen","ChooseMoves","map","updatedChoosen","find","oldNdex","filter","selectUnselect","key","src","alt","QuitModal","TopArea","header","OpponentAvatar","OpponentInfo","quitModalShown","setQuitModalShown","activeStep","setPokemonList","undefined","opponent","setOpponent","getOpponent","getPokemonList","Step","useEffect","all","finally","UrlRouter","exact","path","component","StateRouter","to","screenState","setScreenState","ActiveScreen","Provider","value","React","createContext","App","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1002adb2.chunk.js","sourcesContent":["class Auth {\n  isAuthenticated = false;\n\n  authenticate(onAuthenticatedCallback = () => { }) {\n    this.isAuthenticated = true;\n    setTimeout(onAuthenticatedCallback, 100); // fake async\n  }\n\n  signout(onSignoutCallback = () => { }) {\n    this.isAuthenticated = false;\n    setTimeout(onSignoutCallback, 100);\n  }\n}\n\nexport default new Auth();\n","import React from 'react';\n\nexport default function Input(props: React.InputHTMLAttributes<HTMLInputElement>) {\n  return (\n    <input {...props} />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  default as MaterialButton,\n  ButtonProps,\n} from '@material-ui/core/Button';\nimport { PLINK_SFX_PATH } from '../../../constants/paths/audio';\n\nexport default function Button({ ...props }:\n  Required<Pick<ButtonProps, 'onClick' | 'children'>>\n  & Pick<ButtonProps, 'disabled'>\n) {\n  return (\n    <StyledMaterialButton\n      {...props}\n      onClick={e => {\n        // create an Audio object each time onClick triggered\n        // to allow the SFX to be stacked\n        const plinkSfx = new Audio(PLINK_SFX_PATH);\n        plinkSfx.play();\n        props.onClick(e);\n      }}\n    />\n  );\n}\n\nconst StyledMaterialButton = styled(MaterialButton)`\n  && {\n    color: inherit;\n  }\n`;\n","export const PLINK_SFX_PATH = 'assets/audio/sfx/plink.mp3';\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n","import styled from 'styled-components';\nimport { Centered } from '../../components/basics';\n\nexport const LayoutContainer = styled(Centered)`\n  background-image: linear-gradient(141deg, #9fb8ad 0%, #1fc8db 51%, #2cb5e8 75%);\n  height: 100vh;\n`;\n","import React, { useContext } from 'react';\nimport Auth from '../../utils/auth';\nimport { NavigationContext, ScreenState } from '../../navigation';\nimport { Input, Button } from '../../components/basics';\nimport { LayoutContainer } from './Login.styled';\n\nexport default function Login() {\n  const navigate = useContext(NavigationContext);\n\n  function onLogin() {\n    Auth.authenticate(() => {\n      navigate(ScreenState.Lobby);\n    });\n  }\n\n  return (\n    <LayoutContainer>\n      <header>\n        <div>Welcome to</div>\n        <h1>Battle Tent</h1>\n      </header>\n      <main>\n        <h5>What is your display name?</h5>\n        <Input autoFocus placeholder=\"...Trainer123\" />\n        <Button onClick={onLogin}>Enter</Button>\n      </main>\n    </LayoutContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport MaterialModal from '@material-ui/core/Modal';\nimport Fade from '@material-ui/core/Fade';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { PLINK_SFX_PATH } from '../../constants/paths/audio';\n\nexport interface ModalProps {\n  shown?: boolean;\n  onClose: () => void;\n  children: React.ReactChild | React.ReactChild[];\n}\n\nexport default function Modal({\n  shown = true,\n  onClose,\n  children,\n}: ModalProps) {\n  return (\n    <StyledMaterialModal\n      open={shown}\n      onClose={() => {\n        // create an Audio object each time onClick triggered\n        // to allow the SFX to be stacked\n        const plinkSfx = new Audio(PLINK_SFX_PATH);\n        plinkSfx.play();\n        onClose();\n      }}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={shown}>\n        <ContentContainer>\n          {children}\n        </ContentContainer>\n      </Fade>\n    </StyledMaterialModal>\n  );\n}\n\nconst StyledMaterialModal = styled(MaterialModal)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ContentContainer = styled.div`\n  background: white;\n  padding: 24px;\n`;","import React from 'react';\nimport {\n  default as CircularProgress,\n  CircularProgressProps\n} from '@material-ui/core/CircularProgress';\n\nexport interface LoadingIndicatorProps {\n  size?: CircularProgressProps['size'];\n}\n\nexport default function LoadingIndicator({ size }: LoadingIndicatorProps) {\n  return (\n    <CircularProgress size={size} />\n  )\n}\n","import styled from 'styled-components';\nimport { Centered } from '../../components/basics';\n\nexport const LayoutContainer = styled(Centered)`\n  background-image: linear-gradient(141deg,#ffab63 0%,#46bdca 51%,#4eb2d4 75%);\n  height: 100vh;\n  color: white;\n`;\n","import React, { useState, useContext } from 'react';\nimport { Input, Button } from '../../components/basics';\nimport Modal, { ModalProps } from '../../components/Modal';\nimport LoadingIndicator from '../../components/LoadingIndicator';\nimport { NavigationContext, ScreenState } from '../../navigation';\nimport Auth from '../../utils/auth';\nimport { LayoutContainer } from './Lobby.styled';\n\nexport default function Lobby() {\n  const [inviteModalShown, setInviteModalShown] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useContext(NavigationContext);\n\n  async function onFindMatch() {\n    setIsLoading(true);\n    try {\n      const response = await fetch('');\n      if (response.status !== 200) throw response;\n      setTimeout(() => navigate(ScreenState.Battle), 1500)\n    } catch (e) {\n      console.error(e);\n      alert(e);\n    }\n    // setIsLoading(false);\n    setTimeout(() => setIsLoading(false), 1500)\n  }\n  async function onInviteMatch() {\n    setIsLoading(true);\n    try {\n      const response = await fetch('');\n      if (response.status !== 200) throw response;\n    } catch (e) {\n      console.error(e);\n      alert(e);\n    }\n    setIsLoading(false);\n  }\n\n  function openInviteModal() {\n    setInviteModalShown(true);\n    onInviteMatch();\n  }\n  function closeInviteModal() {\n    setInviteModalShown(false);\n  }\n\n  function onSignOut() {\n    Auth.signout();\n    navigate(ScreenState.Login);\n  }\n\n  return (\n    <LayoutContainer>\n      <InviteModal shown={inviteModalShown} onClose={closeInviteModal} />\n      <header>\n        <h1>Battle Tent</h1>\n      </header>\n      {isLoading ? <LoadingIndicator /> :\n        <div>\n          <Button onClick={onFindMatch}>Find match</Button>\n          <Button disabled onClick={openInviteModal}>Invite</Button>\n          <Button onClick={onSignOut}>Change name</Button>\n        </div>\n      }\n    </LayoutContainer>\n  );\n}\n\nfunction InviteModal({ shown, onClose }: Omit<ModalProps, 'children'>) {\n  return (\n    <Modal shown={shown} onClose={onClose}>\n      Who do you want to invite?\n      <Input />\n    </Modal>\n  );\n}\n","export enum BattleStep {\n  ChooseParty,\n  ChooseMoves,\n}\n","import socketIOClient from 'socket.io-client';\nimport { SOCKET_ENDPOINT } from './constants';\nimport Pokemon from '../types/Pokemon';\nimport Trainer from '../types/Trainer';\n\nconst socket = socketIOClient(SOCKET_ENDPOINT);\n\ntype ApiResponse<T = void> = T extends void ? {\n  error?: any;\n} : {\n  data: T\n  error?: any;\n};\n\nenum Event {\n  PlayerSelectsPokemon = 'player_selects_pokemon',\n}\n\nexport function fetchPokemonList(): Promise<ApiResponse<Pokemon[]>> {\n  return new Promise((resolve, reject) => {\n    // socket.on('get_opponent', (ACK: boolean, data: Trainer) => {\n    //   socket.removeListener(Event.PlayerSelectsPokemon);\n    //   ACK ? resolve({ data }) : reject({ error: true });\n    // });\n    setTimeout(() => resolve({ data: dummyPokemonList }), 2000);\n  });\n}\nexport function fetchOpponent(): Promise<ApiResponse<Trainer>> {\n  return new Promise((resolve, reject) => {\n    // socket.on('get_opponent', (ACK: boolean, data: Trainer) => {\n    //   socket.removeListener(Event.PlayerSelectsPokemon);\n    //   ACK ? resolve({ data }) : reject({ error: true });\n    // });\n    setTimeout(() => resolve({ data: { name: 'opponentUsername' } }), 2000);\n  });\n}\n\nexport function sendChoosenParty(pokemonNdexs: Array<Pokemon['ndex']>): Promise<ApiResponse> {\n  socket.emit(Event.PlayerSelectsPokemon, pokemonNdexs);\n  return new Promise((resolve, reject) => {\n    // socket.on(Event.PlayerSelectsPokemon, (ACK: boolean) => {\n    //   socket.removeListener(Event.PlayerSelectsPokemon);\n    //   ACK ? resolve() : reject({ error: true });\n    // });\n    setTimeout(() => resolve({}), 2000);\n  });\n}\n\nconst dummyMove = {\n  name: 'Vine Whip',\n  description: 'long string',\n  type: 'Grass',\n  power: 40,\n  accuracy: 80,\n  pp: 10,\n};\nconst dummyPokemonList: Pokemon[] = [\n  {\n    ndex: '001',\n    name: 'Bulbasaur',\n    types: ['Poison', 'Grass'],\n    image: 'image-url',\n    moves: [dummyMove],\n    stats: {},\n  },\n  {\n    ndex: '001',\n    name: 'Bulbasaur-2',\n    types: ['Poison', 'Grass'],\n    image: 'image-url',\n    moves: [dummyMove],\n    stats: {},\n  },\n  {\n    ndex: '001',\n    name: 'Bulbasaur-3',\n    types: ['Poison', 'Grass'],\n    image: 'image-url',\n    moves: [dummyMove],\n    stats: {},\n  },\n];\n","export const SOCKET_ENDPOINT = 'http://127.0.0.1:3460';\n","import styled from 'styled-components';\n\nexport const TileContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  margin: 16px;\n`;\n\nexport const Tile = styled.div`\n  border: 1px solid white;\n  margin: 8px;\n`;\n\nexport const TileDetail = styled.div`\n  font-weight: bold;\n`;\n","import React, { useState } from 'react';\nimport Pokemon from '../../../../types/Pokemon';\nimport { Button } from '../../../../components/basics';\nimport { BattleStep } from '../../enums';\nimport { sendChoosenParty } from '../../../../apis/battleApi';\nimport { TileContainer, Tile, TileDetail } from './ChooseParty.styled';\n\nexport interface ChoosePartyProps {\n  pokemonList: Pokemon[];\n  setActiveStep: React.Dispatch<React.SetStateAction<BattleStep>>;\n}\n\nexport default function ChooseParty({ pokemonList, setActiveStep }: ChoosePartyProps) {\n  const [choosen, setChoosen] = useState<Array<Pokemon['ndex']>>([]);\n\n  function selectUnselect(ndex: Pokemon['ndex']) {\n    const updatedChoosen = choosen.find(oldNdex => oldNdex === ndex)\n      ? choosen.filter(oldNdex => oldNdex !== ndex)\n      : [...choosen, ndex];\n    setChoosen(updatedChoosen);\n  }\n\n  async function onConfirmParty() {\n    const response = await sendChoosenParty(choosen);\n    if (response.error) {\n      console.error(response.error);\n      alert('and error occured!');\n    }\n    else setActiveStep(BattleStep.ChooseMoves);\n  }\n\n  return (\n    <div>\n      <h5>Choose your Pokémon</h5>\n      <TileContainer>\n        {pokemonList.map(({ ndex, image, name, types }) => (\n          <Tile onClick={() => selectUnselect(ndex)} key={ndex}>\n            <img src={image} alt={name} />\n            <TileDetail>\n              <div>\n                {name}\n              </div>\n              <div>\n                {types}\n              </div>\n            </TileDetail>\n          </Tile>\n        ))}\n      </TileContainer>\n      <Button onClick={onConfirmParty}>Battle</Button>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function ChooseMoves() {\n  return (\n    <div>ChooseMoves</div>\n  );\n}\n","import React, { useContext } from 'react';\nimport { Button } from '../../components/basics';\nimport Modal, { ModalProps } from '../../components/Modal';\nimport { NavigationContext, ScreenState } from '../../navigation';\n\nexport function QuitModal({ shown, onClose }: Omit<ModalProps, 'children'>) {\n  const navigate = useContext(NavigationContext);\n\n  function quit() {\n    navigate(ScreenState.Lobby);\n  }\n\n  return (\n    <Modal shown={shown} onClose={onClose}>\n      Do you really wish to quit?\n      <Button onClick={quit}>Yes</Button>\n      <Button onClick={onClose}>No</Button>\n    </Modal>\n  );\n}\n","import styled from 'styled-components';\nimport { Centered } from '../../components/basics';\n\nexport const LayoutContainer = styled(Centered)`\n  background-image: linear-gradient(141deg,#1294a2 35%,#0a4861 75%);\n  justify-content: flex-start;\n  height: 100vh;\n  color: white;\n`;\n\nexport const TopArea = styled.header`\n  display: flex;\n  justify-self: flex-start;\n  justify-content: space-between;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 16px;\n`;\n\nexport const OpponentAvatar = styled.div`\n  display: inline-block;\n  height: 32px;\n  width: 32px;\n  border-radius: 50%;\n  border: 2px solid white;\n  padding: 16px;\n`;\nexport const OpponentInfo = styled.div`\n  display: flex;\n  justify-content: flex-start;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '../../components/basics';\nimport LoadingIndicator from '../../components/LoadingIndicator';\nimport * as Steps from './steps';\nimport { QuitModal } from './QuitModal';\nimport { fetchOpponent, fetchPokemonList } from '../../apis/battleApi';\nimport { BattleStep } from './enums';\nimport Pokemon from '../../types/Pokemon';\nimport Trainer from '../../types/Trainer';\nimport { LayoutContainer, TopArea, OpponentInfo, OpponentAvatar } from './Battle.styled';\n\nexport default function Battle() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [quitModalShown, setQuitModalShown] = useState(false);\n  const [activeStep, setActiveStep] = useState(BattleStep.ChooseParty);\n  const [pokemonList, setPokemonList] = useState<Pokemon[]>([]);\n  const [opponent, setOpponent] = useState<Trainer | undefined>(undefined);\n\n  useEffect(() => {\n    setIsLoading(true);\n    Promise.all([\n      getOpponent(),\n      getPokemonList(),\n    ]).finally(() => setIsLoading(false));\n  }, []);\n\n  async function getOpponent() {\n    try {\n      const response = await fetchOpponent();\n      setOpponent(response.data);\n    } catch (e) {\n      console.error(e);\n      alert(e);\n    }\n  }\n\n  async function getPokemonList() {\n    try {\n      const response = await fetchPokemonList();\n      setPokemonList(response.data);\n    } catch (e) {\n      console.error(e);\n      alert(e);\n    }\n  }\n\n  function openQuitModal() {\n    setQuitModalShown(true);\n  }\n  function closeQuitModal() {\n    setQuitModalShown(false);\n  }\n\n  function Step() {\n    function ChooseParty() {\n      return (\n        <Steps.ChooseParty\n          pokemonList={pokemonList}\n          setActiveStep={setActiveStep}\n        />\n      );\n    }\n    switch (activeStep) {\n      case BattleStep.ChooseParty: return <ChooseParty />;\n      case BattleStep.ChooseMoves: return <Steps.ChooseMoves />;\n      default: return <ChooseParty />;\n    }\n  }\n\n  return (\n    <LayoutContainer>\n      <QuitModal shown={quitModalShown} onClose={closeQuitModal} />\n      <TopArea>\n        <OpponentInfo>\n          <OpponentAvatar />\n          <div>{opponent && opponent.name}</div>\n        </OpponentInfo>\n        <Button onClick={openQuitModal}>Quit</Button>\n      </TopArea>\n      <main>\n        {isLoading ? <LoadingIndicator /> : <Step />}\n      </main>\n    </LayoutContainer>\n  );\n}\n","import React, { useState } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Login from '../screens/Login';\nimport Lobby from '../screens/Lobby';\nimport Battle from '../screens/Battle';\nimport { NavigationContext, ScreenState } from '.';\n\nexport default function UrlRouter() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={StateRouter} />\n        <Route path=\"/about\">\n          <h3>About</h3>\n        </Route>\n        <Redirect to=\"/\" /> {/* redirect any other path to here */}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nfunction StateRouter() {\n  const [screenState, setScreenState] = useState(ScreenState.Login);\n\n  function ActiveScreen() {\n    switch (screenState) {\n      case ScreenState.Lobby: return <Lobby />;\n      case ScreenState.Battle: return <Battle />;\n      default: return <Login />;\n    }\n  }\n\n  return (\n    <NavigationContext.Provider value={setScreenState}>\n      <ActiveScreen />\n    </NavigationContext.Provider>\n  );\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { ScreenState } from '.';\n\nexport default React.createContext<\n  Dispatch<SetStateAction<ScreenState>>\n>(() => { });\n","export enum ScreenState {\n  Login,\n  Lobby,\n  Battle,\n}\n","import React from 'react';\nimport { Router } from './navigation';\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <Router />\n    </React.StrictMode>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}